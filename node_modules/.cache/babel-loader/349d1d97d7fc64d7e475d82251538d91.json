{"ast":null,"code":"var _jsxFileName = \"E:\\\\h\\u1ECDc t\\u1EADp\\\\react\\\\Assignment 02 (Starter Code)\\\\src\\\\components\\\\MovieDetail\\\\Trailer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, Fragment } from \"react\";\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"96ec8e5f2348abf53ecf12050ca01501\";\n\nconst Trailer = props => {\n  _s();\n\n  const [status, setStatus] = useState(false);\n  const [getTrailer, setGetTrailer] = useState(props.movieDetail.backdrop_path); // Set default state to backdrop\n\n  useEffect(() => {\n    const trailer = async () => {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${props.movieDetail.id}/videos?api_key=${API_KEY}`);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong !\");\n      }\n\n      const getData = await response.json(); // Filter site = youtube & type = trailer\n\n      let trailerFilter = getData.results.filter(e => {\n        return e.site === \"YouTube\" && e.type === \"Trailer\";\n      }); // If cant find type = trailer than filter type = teaser\n\n      if (trailerFilter.length === 0) {\n        trailerFilter = getData.results.filter(e => {\n          return e.site === \"YouTube\" && e.type === \"Teaser\";\n        });\n      } // If even cant find type = teaser => set back to default\n\n\n      if (trailerFilter.length === 0) {\n        setGetTrailer(props.movieDetail.backdrop_path);\n        setStatus(false);\n      } else {\n        // If find something then pick the first appear\n        setGetTrailer(trailerFilter[0]);\n        setStatus(true);\n      }\n    };\n\n    getTrailer().catch(error => {\n      console.log(error);\n    });\n  }, [props]);\n  const opts = {\n    height: \"400\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 0\n    }\n  };\n\n  function onReady(event) {\n    event.target.pauseVideo();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [status && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: getTrailer.key,\n      opts: opts,\n      onReady: onReady\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), !status && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/original/${getTrailer}`,\n      alt: \"none\",\n      width: \"100%\",\n      height: \"400px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Trailer, \"f/AJ/jdBlKUTTq7WjYigCj60HIo=\");\n\n_c = Trailer;\nexport default Trailer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Trailer\");","map":{"version":3,"names":["useState","useEffect","Fragment","YouTube","API_KEY","Trailer","props","status","setStatus","getTrailer","setGetTrailer","movieDetail","backdrop_path","trailer","response","fetch","id","ok","Error","getData","json","trailerFilter","results","filter","e","site","type","length","catch","error","console","log","opts","height","width","playerVars","autoplay","onReady","event","target","pauseVideo","key"],"sources":["E:/học tập/react/Assignment 02 (Starter Code)/src/components/MovieDetail/Trailer.js"],"sourcesContent":["import { useState, useEffect, Fragment } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\n\r\nconst API_KEY = \"96ec8e5f2348abf53ecf12050ca01501\";\r\n\r\nconst Trailer = (props) => {\r\n  const [status, setStatus] = useState(false);\r\n  const [getTrailer, setGetTrailer] = useState(props.movieDetail.backdrop_path); // Set default state to backdrop\r\n\r\n  useEffect(() => {\r\n    const trailer = async () => {\r\n      const response = await fetch(\r\n        `https://api.themoviedb.org/3/movie/${props.movieDetail.id}/videos?api_key=${API_KEY}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong !\");\r\n      }\r\n\r\n      const getData = await response.json();\r\n\r\n      // Filter site = youtube & type = trailer\r\n      let trailerFilter = getData.results.filter((e) => {\r\n        return e.site === \"YouTube\" && e.type === \"Trailer\";\r\n      });\r\n\r\n      // If cant find type = trailer than filter type = teaser\r\n      if (trailerFilter.length === 0) {\r\n        trailerFilter = getData.results.filter((e) => {\r\n          return e.site === \"YouTube\" && e.type === \"Teaser\";\r\n        });\r\n      }\r\n\r\n      // If even cant find type = teaser => set back to default\r\n      if (trailerFilter.length === 0) {\r\n        setGetTrailer(props.movieDetail.backdrop_path);\r\n        setStatus(false);\r\n      } else {\r\n        // If find something then pick the first appear\r\n        setGetTrailer(trailerFilter[0]);\r\n        setStatus(true);\r\n      }\r\n    };\r\n\r\n    getTrailer().catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }, [props]);\r\n\r\n  const opts = {\r\n    height: \"400\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 0,\r\n    },\r\n  };\r\n\r\n  function onReady(event) {\r\n    event.target.pauseVideo();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {status && (\r\n        <YouTube videoId={getTrailer.key} opts={opts} onReady={onReady} />\r\n      )}\r\n      {!status && (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/original/${getTrailer}`}\r\n          alt=\"none\"\r\n          width=\"100%\"\r\n          height=\"400px\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trailer;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,OAAO,GAAG,kCAAhB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EAAA;;EACzB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;EACA,MAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAACM,KAAK,CAACK,WAAN,CAAkBC,aAAnB,CAA5C,CAFyB,CAEsD;;EAE/EX,SAAS,CAAC,MAAM;IACd,MAAMY,OAAO,GAAG,YAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCT,KAAK,CAACK,WAAN,CAAkBK,EAAG,mBAAkBZ,OAAQ,EAD3D,CAA5B;;MAIA,IAAI,CAACU,QAAQ,CAACG,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;MACD;;MAED,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAtB,CAT0B,CAW1B;;MACA,IAAIC,aAAa,GAAGF,OAAO,CAACG,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAO;QAChD,OAAOA,CAAC,CAACC,IAAF,KAAW,SAAX,IAAwBD,CAAC,CAACE,IAAF,KAAW,SAA1C;MACD,CAFmB,CAApB,CAZ0B,CAgB1B;;MACA,IAAIL,aAAa,CAACM,MAAd,KAAyB,CAA7B,EAAgC;QAC9BN,aAAa,GAAGF,OAAO,CAACG,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAO;UAC5C,OAAOA,CAAC,CAACC,IAAF,KAAW,SAAX,IAAwBD,CAAC,CAACE,IAAF,KAAW,QAA1C;QACD,CAFe,CAAhB;MAGD,CArByB,CAuB1B;;;MACA,IAAIL,aAAa,CAACM,MAAd,KAAyB,CAA7B,EAAgC;QAC9BjB,aAAa,CAACJ,KAAK,CAACK,WAAN,CAAkBC,aAAnB,CAAb;QACAJ,SAAS,CAAC,KAAD,CAAT;MACD,CAHD,MAGO;QACL;QACAE,aAAa,CAACW,aAAa,CAAC,CAAD,CAAd,CAAb;QACAb,SAAS,CAAC,IAAD,CAAT;MACD;IACF,CAhCD;;IAkCAC,UAAU,GAAGmB,KAAb,CAAoBC,KAAD,IAAW;MAC5BC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD,CAFD;EAGD,CAtCQ,EAsCN,CAACvB,KAAD,CAtCM,CAAT;EAwCA,MAAM0B,IAAI,GAAG;IACXC,MAAM,EAAE,KADG;IAEXC,KAAK,EAAE,MAFI;IAGXC,UAAU,EAAE;MACVC,QAAQ,EAAE;IADA;EAHD,CAAb;;EAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;IACtBA,KAAK,CAACC,MAAN,CAAaC,UAAb;EACD;;EAED,oBACE;IAAA,WACGjC,MAAM,iBACL,QAAC,OAAD;MAAS,OAAO,EAAEE,UAAU,CAACgC,GAA7B;MAAkC,IAAI,EAAET,IAAxC;MAA8C,OAAO,EAAEK;IAAvD;MAAA;MAAA;MAAA;IAAA,QAFJ,EAIG,CAAC9B,MAAD,iBACC;MACE,GAAG,EAAG,uCAAsCE,UAAW,EADzD;MAEE,GAAG,EAAC,MAFN;MAGE,KAAK,EAAC,MAHR;MAIE,MAAM,EAAC;IAJT;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAvED;;GAAMJ,O;;KAAAA,O;AAyEN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}